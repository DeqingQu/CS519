0. For each of the coding problems below:
(a) Describe an exhaustive solution, and analyze complexity (might be exponential).
Unbounded Knapsack:
    The exhaustive solution is to enumerate all possible situations that match the requirements. For example, if we want
    to calculate best(58, [(5, 9), (9, 18), (6, 12)]), we can calculate the maximum possible number max_num of each item
    ceil(W/wi), then loop each item max_num times to record all possible situations and compare all them to get the final
    result.
    The time complexity is (max(W/wi))^n

Bounded Knapsack:
    It is very similar to the unbounded knapsack, the only difference is max_num can't be more than the copies of the item.
    The time complexity is (max(W/wi))^n

(b) Describe a greedy solution, and analyze complexity.
Unbounded Knapsack:
    The greedy solution is to find the most valuable item first (vi/wi is max), then choose max_num of the most valuable
    item, where max_num equals to W//wi. Repeat this process until can't find any item or no weight for the bag.
    The time complexity is n*n

Bounded Knapsack:
    It is very similar to the unbounded knapsack, the only difference is max_num is min(W//wi, ci), where ci is the copies
    of the item.
    The time complexity is n*n

(c) Show a counterexample to the greedy solution.
    I take unbounded knapsack as example, bounded knapsack is the same actually.
    best(7, [(2, 4), (3, 6.5)])
    For greed solution, the result is (13, [0, 2]). It will take as many as the second item possible, because 6.5/3 > 4/2.
    The correct answer is (14.5, [2, 1]).

(d) Theoretically, is the top-down solution faster, or the bottom-up one faster?
    I believe the top-down solution should be faster. The top-down solution has more time expense on stack for recursion, but it
    doesn't need to go through all opt[i][x].

(e) Empirically, which one is faster? (Try some long random lists)
    Empirically, the bottom-up solution performs as same as the top-down solution. Sometimes the bottom-up one is better,
    and sometimes the top-down one is better.

//  TEST CODE
import random
times = 200
lst = []
for _ in range(times):
    lst.append((random.randint(1, 10), random.randint(5, 20), random.randint(1, 10)))
Weight = random.randint(times*10, times*11)
print("weight = ", Weight)

from time import time
t= time()
a = best(Weight, lst)
print("Top-Down Time : ", time() -t)
t= time()
a = best2(Weight, lst)
print("Bottom-Up Time : ", time() -t)

//  TEST RESULT
weight =  2171
Top-Down Time :  1.458043098449707
Bottom-Up Time :  1.5860188007354736

weight =  2151
Top-Down Time :  1.5756869316101074
Bottom-Up Time :  1.553830862045288


1.    Q: What are the time and space complexities?
The time complexities are O(nW)
The space complexities are O(W)

2.    Q: What are the time and space complexities?
The time complexities are O(sum(ci)*w)
The space complexities are O(nw)


Debriefing (required!): --------------------------

0. Deqing Qu
1. more than 6 hours
2. Difficult
3. I work it out alone and then help many other classmates to figure it out.
4. 90%
5. The DP is difficult and challenging. The matrix is very helpful to understand the bounded knapsack. I draw the matrix
many times for myself and other classmates.
6. Not yet.