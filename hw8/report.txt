0. (a) Describe a greedy algorithm for LIS and show a counter example.
Find the longest increasing sequence for the string without the last letter lis(s[:-1]). If the last letter of the original string is
more than the last letter of the result, the final result is lis(s) = lis(s[:-1]) + s[-1]. If not, the result is lis(s) = lis(s[:-1]).
The base case is lis(s) = 1, if len(s) == 1.
Counter Example: lis("aebccg") = "aeg" for the greedy algorithm. But the correct answer should be "abcg"

   (b) Describe an exhaustive algorithm for TSP and analyze complexity.
For the naive exhaustive algorithm, it can list all permutations of all cities and find the shortest path of all permutation.
Time complexity = O(n!)
Space complexity = O(n!)

1. What are the time and space complexities?
Time complexity = O(n^2). In the outer loop, all elements are looped. In the inner loop, it looks for any element is less than the current element.
Space complexity = O(n)

2.    (a) did you realize that bottom-up implementations of DP use (implicit) topological orderings?
       e.g., what is the topological ordering in your (or my) bottom-up bounded knapsack code?
Yes. The topological ordering is from the top level in the matrix to the down level in the matrix. It looks like the following.
[ opt[0][0], ..., opt[0][x], opt[1][0], ..., opt[1][x], ..., opt[i][0], ..., opt[i][x] ]

   (b) what about top-down implementations? what order do they use to traverse the graph?
The top-down implementations also use topological orderings. It use the reversed topological ordering to traverse the graph.

   (c) does that suggest there is a top-down solution for topological sort as well?
Yes. The topological sort can be implemented in DFS. We can use a temporary stack to record the result. We start from a vertex,
first recursively call topological sorting for all its adjacent vertices, then push it to the stack. The vertex is pushed to the stack
only when all its adjacent vertices are already in stack. Finally pop all vertices in stack and get the topological ordering.


Debriefing (required!): --------------------------

0. Deqing Qu
1. 6 hours
2. Difficult
3. I did it alone and I google for solutions for the questions.
4. 85% - 90%
5. Homework is difficult and challenging. There are many solutions for each question, like top-down and bottom-up. The time
and space performance of each solution is different and it is not an easy thing to handle all of them.
6. Not yet.